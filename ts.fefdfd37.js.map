{"mappings":"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","sources":["./src/ts/models/position.ts","./src/ts/models/tetrimino.ts","./src/ts/models/grid.ts","./src/ts/views/cellView.ts","./src/ts/views/gridView.ts","./src/ts/views/gameView.ts","./src/ts/views/appView.ts","./src/ts/index.ts"],"sourcesContent":["class Position {\n  x: number;\n  y: number;\n\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nexport class AbsolutePosition extends Position {\n  getAbsolute(relativePosition: RelativePosition) {\n    return new AbsolutePosition(\n      this.x + relativePosition.x,\n      this.y + relativePosition.y\n    );\n  }\n}\n\nexport class RelativePosition extends Position {}\n","import { AbsolutePosition, RelativePosition } from \"./position\";\n\nconst tRelativePositions = [\n  new RelativePosition(0, 0),\n  new RelativePosition(-1, 0),\n  new RelativePosition(1, 0),\n  new RelativePosition(0, 1),\n];\n\nclass Tetrimino {\n  centerPosition: AbsolutePosition = new AbsolutePosition(5, 15);\n  occupiedRelativePositions: RelativePosition[];\n  inGrid: (position: AbsolutePosition) => boolean;\n\n  constructor(inGrid) {\n    this.occupiedRelativePositions = tRelativePositions;\n    this.inGrid = inGrid;\n  }\n\n  occupiedAbsolutePositions() {\n    return this.occupiedRelativePositions.map((relativePosition) =>\n      this.centerPosition.getAbsolute(relativePosition)\n    );\n  }\n\n  moveDown(): void {\n    this.move(new RelativePosition(0, -1));\n  }\n\n  moveLeft(): void {\n    this.move(new RelativePosition(-1, 0));\n  }\n\n  moveRight(): void {\n    this.move(new RelativePosition(1, 0));\n  }\n\n  move(vector: RelativePosition): void {\n    const nextCenterPosition = this.centerPosition.getAbsolute(vector);\n    if (this.canMoveTo(nextCenterPosition)) {\n      this.centerPosition = nextCenterPosition;\n    }\n  }\n\n  canMoveTo(nextCenterPosition: AbsolutePosition): boolean {\n    const nextAbosolutePositions = this.occupiedRelativePositions.map(\n      (position) => nextCenterPosition.getAbsolute(position)\n    );\n    return this.canBeIn(nextAbosolutePositions);\n  }\n\n  rotateClockwise(): void {\n    this.rotate((position) => new RelativePosition(position.y, -position.x));\n  }\n\n  rotateCounterClockwise(): void {\n    this.rotate((position) => new RelativePosition(-position.y, position.x));\n  }\n\n  rotate(\n    rotateFuction: (position: RelativePosition) => RelativePosition\n  ): void {\n    const nextRelativePositions = this.occupiedRelativePositions.map(\n      rotateFuction\n    );\n    const nextAbsolutePositions = nextRelativePositions.map((position) =>\n      this.centerPosition.getAbsolute(position)\n    );\n    if (this.canBeIn(nextAbsolutePositions)) {\n      this.occupiedRelativePositions = nextRelativePositions;\n    }\n  }\n\n  canBeIn(nextOccupiedAbsolutePositions: AbsolutePosition[]): boolean {\n    return nextOccupiedAbsolutePositions.every(this.inGrid);\n  }\n}\n\nexport default Tetrimino;\n","import Tetrimino from \"./tetrimino\";\nimport { AbsolutePosition } from \"./position\";\n\nclass Grid {\n  static HEIGHT = 20;\n  static WIDTH = 10;\n\n  currentTetrimino: Tetrimino = new Tetrimino(this.inGrid.bind(this));\n\n  constructor(updateView) {\n    setInterval(() => {\n      this.tick(updateView);\n    }, 500);\n  }\n\n  tick(updateView): void {\n    this.currentTetrimino.moveDown();\n    updateView();\n  }\n\n  inGrid(position: AbsolutePosition): boolean {\n    return 0 <= position.x && position.x <= Grid.WIDTH - 1 && 0 <= position.y;\n  }\n}\n\nexport default Grid;\n","const FILLED_COLOR = \"#000000\";\nconst EMPTY_COLOR = \"#E0E0E0\";\n\nclass OuterCellView implements View {\n  elem: HTMLElement = this.initialElem();\n  innerCellView: InnerCellView = new InnerCellView(this);\n\n  constructor(parentView: View) {\n    parentView.elem.appendChild(this.elem);\n  }\n\n  initialElem(): HTMLElement {\n    const elem = document.createElement(\"li\");\n    elem.style.listStyle = \"none\";\n    elem.style.width = \"78%\";\n    elem.style.height = \"78%\";\n    elem.style.border = \"2px solid\";\n    elem.style.display = \"flex\";\n    elem.style.justifyContent = \"center\";\n    elem.style.alignItems = \"center\";\n    return elem;\n  }\n\n  fill() {\n    this.elem.style.borderColor = FILLED_COLOR;\n    this.innerCellView.fill();\n  }\n\n  clear() {\n    this.elem.style.borderColor = EMPTY_COLOR;\n    this.innerCellView.clear();\n  }\n}\n\nclass InnerCellView {\n  elem: HTMLElement;\n\n  constructor(parentView: View) {\n    this.elem = document.createElement(\"div\");\n    parentView.elem.appendChild(this.elem);\n\n    this.elem.style.width = \"75%\";\n    this.elem.style.height = \"75%\";\n    this.elem.style.backgroundColor = EMPTY_COLOR;\n  }\n\n  fill() {\n    this.elem.style.backgroundColor = FILLED_COLOR;\n  }\n\n  clear() {\n    this.elem.style.backgroundColor = EMPTY_COLOR;\n  }\n}\n\nexport default OuterCellView;\n","import Grid from \"../models/grid\";\nimport CellView from \"./cellView\";\n\nclass GridView implements View {\n  model: Grid = new Grid(this.draw.bind(this));\n  elem: HTMLElement = this.initialElem();\n  cellViews: CellView[][] = this.initialCellViews();\n\n  constructor(parentView: View) {\n    parentView.elem.appendChild(this.elem);\n    this.draw();\n    document.addEventListener(\"keydown\", (e) => this.onKeyDown(e));\n  }\n\n  initialElem(): HTMLElement {\n    const elem = document.createElement(\"ul\");\n    elem.style.display = \"grid\";\n    elem.style.gridTemplateColumns = `repeat(${Grid.WIDTH}, 32px)`;\n    elem.style.gridTemplateRows = `repeat(${Grid.HEIGHT}, 32px)`;\n    elem.style.justifyItems = \"center\";\n    elem.style.alignItems = \"center\";\n    return elem;\n  }\n\n  initialCellViews(): CellView[][] {\n    return Array(Grid.HEIGHT)\n      .fill(null)\n      .map(() =>\n        Array(Grid.WIDTH)\n          .fill(null)\n          .map(() => new CellView(this))\n      );\n  }\n\n  draw() {\n    this.cellViews.forEach((cellsRow) =>\n      cellsRow.forEach((cell) => cell.clear())\n    );\n    this.model.currentTetrimino\n      .occupiedAbsolutePositions()\n      .forEach((position) =>\n        this.cellViews[Grid.HEIGHT - 1 - position.y][position.x].fill()\n      );\n  }\n\n  onKeyDown(e: KeyboardEvent): void {\n    switch (e.key) {\n      case \"ArrowLeft\":\n        this.model.currentTetrimino.moveLeft();\n        this.draw();\n        break;\n      case \"ArrowRight\":\n        this.model.currentTetrimino.moveRight();\n        this.draw();\n        break;\n      case \"d\":\n        this.model.currentTetrimino.rotateClockwise();\n        this.draw();\n        break;\n      case \"s\":\n        this.model.currentTetrimino.rotateCounterClockwise();\n        this.draw();\n        break;\n    }\n  }\n}\n\nexport default GridView;\n","import GridView from \"./gridView\";\n\nclass GameView implements View {\n  elem: HTMLElement = document.createElement(\"div\");\n  gridView: GridView = new GridView(this);\n\n  constructor(parentView: View) {\n    parentView.elem.appendChild(this.elem);\n  }\n}\n\nexport default GameView;\n","import GameView from \"./gameView\";\n\nclass AppView implements View {\n  elem: HTMLElement = document.getElementById(\"app\");\n  gameView: GameView;\n\n  constructor() {\n    document.addEventListener(\"keypress\", () => {\n      if (this.gameView) return;\n      this.gameView = new GameView(this);\n    });\n  }\n}\n\nexport default AppView;\n","import AppView from \"./views/appView\";\n\nwindow.onload = () => new AppView();\n"],"names":["Position","x","y","$c8c302c910834996e4115099ae4fa95$var$_classCallCheck","this","AbsolutePosition","relativePosition","RelativePosition","tRelativePositions","$c8c302c910834996e4115099ae4fa95$export$RelativePosition","Tetrimino","inGrid","$fc8a660ff90a9b44c75a7fa21f327ee2$var$_classCallCheck","$c8c302c910834996e4115099ae4fa95$export$AbsolutePosition","occupiedRelativePositions","_this","map","centerPosition","getAbsolute","move","vector","nextCenterPosition","canMoveTo","nextAbosolutePositions","position","canBeIn","rotate","rotateFuction","_this2","nextRelativePositions","nextAbsolutePositions","nextOccupiedAbsolutePositions","every","Grid","updateView","$c6fb2ccd85a48ac7d9b5937217df1b4$var$_classCallCheck","$c6fb2ccd85a48ac7d9b5937217df1b4$var$_defineProperty","$fc8a660ff90a9b44c75a7fa21f327ee2$export$default","bind","setInterval","tick","currentTetrimino","moveDown","WIDTH","OuterCellView","parentView","$a6d996e907b98aba00ce8b13b78eed05$var$_classCallCheck","$a6d996e907b98aba00ce8b13b78eed05$var$_defineProperty","initialElem","InnerCellView","elem","appendChild","document","createElement","style","listStyle","width","height","border","display","justifyContent","alignItems","borderColor","innerCellView","fill","clear","backgroundColor","GridView","$d45e8bb35f7848b6ddd22e496bcc69$var$_classCallCheck","$d45e8bb35f7848b6ddd22e496bcc69$var$_defineProperty","$c6fb2ccd85a48ac7d9b5937217df1b4$export$default","draw","initialCellViews","addEventListener","e","onKeyDown","gridTemplateColumns","concat","gridTemplateRows","HEIGHT","justifyItems","Array","$a6d996e907b98aba00ce8b13b78eed05$export$default","_this3","cellViews","forEach","cellsRow","cell","model","occupiedAbsolutePositions","key","moveLeft","moveRight","rotateClockwise","rotateCounterClockwise","GameView","$b6b7cac238e02716693ac29ec7f04$var$_classCallCheck","$b6b7cac238e02716693ac29ec7f04$var$_defineProperty","$d45e8bb35f7848b6ddd22e496bcc69$export$default","AppView","$b516633a144ae2d701089978383251f5$var$_classCallCheck","getElementById","gameView","$b6b7cac238e02716693ac29ec7f04$export$default","window","onload","$b516633a144ae2d701089978383251f5$export$default"],"version":3,"file":"ts.fefdfd37.js.map"}